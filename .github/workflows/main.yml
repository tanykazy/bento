name: Build & Release

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  deployments: write
  pages: write
  id-token: write

jobs:
  # test:
  #   name: Test (${{ matrix.os }} - ${{ matrix.arch }})
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ macOS-latest, ubuntu-latest, windows-latest ]
  #       arch: [ x64 ]
  #       include:
  #         - os: macOS-latest
  #           arch: arm64
  #   steps:
  #     - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v2.5.2
  #       with:
  #         node-version: 16.x
  #         cache: npm
  #     - name: Install
  #       run: yarn --frozen-lockfile --network-timeout 100000 || yarn --frozen-lockfile --network-timeout 100000 || yarn --frozen-lockfile --network-timeout 100000
  #     - name: Create fake contributors
  #       uses: timheuer/base64-to-file@48657ba25c726c2e3dcf02efa3639fff9b3d587e # v1.2
  #       with:
  #         fileDir: 'static'
  #         fileName: 'contributors.json'
  #         encodedString: "W10="
  #     - name: lint
  #       run: yarn lint
  #     - name: test
  #       run: yarn test:ci
  #     - name: Coveralls
  #       if: matrix.os == 'ubuntu-latest'
  #       uses: coverallsapp/github-action@9ba913c152ae4be1327bfb9085dc806cedb44057 # v1.1.3
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  build:
    # needs: test
    name: Build (${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Build for supported platforms
        # https://github.com/electron/electron-packager/blob/ebcbd439ff3e0f6f92fa880ff28a8670a9bcf2ab/src/targets.js#L9
        # 32-bit Linux unsupported as of 2019: https://www.electronjs.org/blog/linux-32bit-support
        os: [macOS-latest, ubuntu-latest, windows-latest]
        arch: [x64]
        # include:
          # - os: windows-latest
            # arch: x64
          # - os: ubuntu-latest
            # arch: x64
        # Publishing artifacts for multiple Windows architectures has
        # a bug which can cause the wrong architecture to be downloaded
        # for an update, so until that is fixed, only build Windows x64
        # exclude:
          # - os: windows-latest
            # arch: x64

    steps:
      - uses: actions/checkout@v3.5.2
      - name: Setup Node.js
        uses: actions/setup-node@v2.5.2
        with:
          node-version: 16.x
          cache:
            npm
            # - name: Set MacOS signing certs
            #   if: matrix.os == 'macOS-latest'
            #   run: chmod +x tools/add-macos-cert.sh && ./tools/add-macos-cert.sh
            #   env:
            #     MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
            #     MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
            # - name: Set Windows signing certificate
            #   if: matrix.os == 'windows-latest'
            #   continue-on-error: true
            #   id: write_file
            #   uses: timheuer/base64-to-file@48657ba25c726c2e3dcf02efa3639fff9b3d587e # v1.2
            #   with:
            #     fileName: 'win-certificate.pfx'
            #     encodedString: ${{ secrets.WINDOWS_CODESIGN_P12 }}
      - name: Install
        run: npm ci
      - name: Make
        # if: startsWith(github.ref, 'refs/tags/')
        run: npm run make --arch=${{ matrix.arch }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WINDOWS_CODESIGN_FILE: ${{ steps.write_file.outputs.filePath }}
          WINDOWS_CODESIGN_PASSWORD: ${{ secrets.WINDOWS_CODESIGN_PASSWORD }}
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ matrix.os }}
          path: out/make/**/*

#       - name: Build project # This would actually build your project, using zip for an example artifact
#         run: |
#           zip --junk-paths my-artifact README.md
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: out/make/**/*
          asset_name: my-artifact.zip
          asset_content_type: application/zip



      # - name: Release
      #   uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     draft: true
      #     files: |
      #       out/**/*.deb
      #       out/**/*.dmg
      #       out/**/*setup*.exe
      #       out/**/*.nupkg
      #       out/**/*.rpm
      #       out/**/*.zip
      #       out/**/RELEASES
