name: Build & Release

on:
  push:
    branches:
      - main
    # tags:
      # - v*
  # pull_request:

permissions:
  contents: write
  deployments: write
  pages: write
  id-token: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]
        #arch: [x64]
        # include:
          # - os: windows-latest
            # arch: x64
          # - os: ubuntu-latest
            # arch: x64
        # Publishing artifacts for multiple Windows architectures has
        # a bug which can cause the wrong architecture to be downloaded
        # for an update, so until that is fixed, only build Windows x64
        # exclude:
          # - os: windows-latest
            # arch: x64

    steps:
      - uses: actions/checkout@v3.5.2
      - name: Setup Node.js
        uses: actions/setup-node@v2.5.2
        with:
          node-version: 16.x
          cache:
            npm
            # - name: Set MacOS signing certs
            #   if: matrix.os == 'macOS-latest'
            #   run: chmod +x tools/add-macos-cert.sh && ./tools/add-macos-cert.sh
            #   env:
            #     MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
            #     MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
            # - name: Set Windows signing certificate
            #   if: matrix.os == 'windows-latest'
            #   continue-on-error: true
            #   id: write_file
            #   uses: timheuer/base64-to-file@48657ba25c726c2e3dcf02efa3639fff9b3d587e # v1.2
            #   with:
            #     fileName: 'win-certificate.pfx'
            #     encodedString: ${{ secrets.WINDOWS_CODESIGN_P12 }}
      - name: Install
        run: npm ci
      - name: Make
        run: npm run make
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ matrix.os }}
          path: out/make/**/*

      - name: download
        uses: actions/download-artifact@v3
      - name: debug
        run: | 
          ls -R 
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref }} ${{ matrix.os }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ~/
          asset_name: ${{ matrix.os }}
          asset_content_type: application/zip


#       - name: Build project # This would actually build your project, using zip for an example artifact
#         run: |
#           zip --junk-paths my-artifact README.md
  # release:
  #   name: Create release
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: download
  #       uses: actions/download-artifact@v3
  #     - name: debug
  #       run: | 
  #         ls -R 
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref_name }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false
  #     - name: Upload Release Asset
  #       id: upload-release-asset 
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
  #         asset_path: out/make/**/*
  #         asset_name: my-artifact.zip
  #         asset_content_type: application/zip
        #with:
          # draft: true
          # files: |
          #    out/**/*.deb
          #    out/**/*.dmg
          #    out/**/*setup*.exe
          #    out/**/*.nupkg
          #    out/**/*.rpm
          #    out/**/*.zip
          #    out/**/RELEASES

